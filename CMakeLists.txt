# Copyright (c) 2022 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# We are able to build on Ubuntu Bionic.
# On the other hand, some useful features lack:
#  - 3.11: add_library() and add_executable() commands can now be called without any sources
#          and will not complain as long as sources are added later via the target_sources()
#          command.
#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.
#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions
#          at directory level. This supersedes add_definitions().
#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main
#          build system check target to rerun the flagged GLOB commands at build time.
#  - 3.12: Object libraries can be linked to with target_link_libraries().
#  - 3.12: A new $<TARGET_EXISTS:...> generator expression has been added.
#  - 3.13: The install(TARGETS) command learned to install targets created outside the current
#          directory.
#  - 3.13: The target_link_options() command was created to specify link options for targets
#          and their dependents.
#  - 3.13: The target_link_libraries() command may now be called to modify targets created
#          outside the current directory.
#  - 3.14: The file() command learned a new sub-command, CREATE_LINK, which can be used to
#          create hard or symbolic links.
#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.
#  - 3.15: The CMAKE_MSVC_RUNTIME_LIBRARY variable and MSVC_RUNTIME_LIBRARY target property were
#          introduced to select the runtime library used by compilers targeting the MSVC ABI.
#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).
#  - 3.15: The generator expressions X_ID learned to support matching one value from
#          a comma-separated list.
#  - 3.18: The add_library() and add_executable() commands learned to create Alias Targets
#          referencing non-GLOBAL Imported Targets.
#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity
#          of link flags.
cmake_minimum_required(VERSION 3.10)

if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.15)
  # MSVC runtime library flags are selected by the CMAKE_MSVC_RUNTIME_LIBRARY abstraction.
  cmake_policy(SET CMP0091 NEW)
  # MSVC warning flags are not in CMAKE_<LANG>_FLAGS by default.
  cmake_policy(SET CMP0092 NEW)
endif()
if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.20)
  # MSVC RTTI flag /GR is not added to CMAKE_CXX_FLAGS by default.
  cmake_policy(SET CMP0117 NEW)
endif()

project("Bitcoin Core"
  VERSION 24.99.0
  DESCRIPTION "Bitcoin client software"
  LANGUAGES CXX C ASM
)

set(PACKAGE_NAME ${PROJECT_NAME})
set(PACKAGE_VERSION ${PROJECT_VERSION})
set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})
set(CLIENT_VERSION_IS_RELEASE "false")
set(PACKAGE_BUGREPORT "https://github.com/bitcoin/bitcoin/issues")
set(PACKAGE_URL "https://bitcoincore.org/")
set(COPYRIGHT_YEAR "2022")
set(COPYRIGHT_HOLDERS "The %s developers")
set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})
set(COPYRIGHT_HOLDERS_FINAL "The Bitcoin Core developers")

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/module)

# Configurable options.
# When adding a new option, end the <help_text> with a full stop for consistency.
option(BUILD_DAEMON "Build bitcoind executable." ON)
option(BUILD_CLI "Build bitcoin-cli executable." ON)
option(BUILD_TX "Build bitcoin-tx executable." ON)
option(BUILD_UTIL "Build bitcoin-util executable." ON)
option(BUILD_UTIL_CHAINSTATE "Build experimental bitcoin-chainstate executable." OFF)
# We do not use CMake's BUILD_SHARED_LIBS option.
option(BUILD_SHARED "Build shared libraries." ON)
option(BUILD_STATIC "Build static libraries." ON)
if(NOT BUILD_SHARED AND NOT BUILD_STATIC)
  message(FATAL_ERROR "At least one of BUILD_SHARED and BUILD_STATIC must be enabled.")
endif()
option(BUILD_BITCOINCONSENSUS_LIB "Build bitcoinconsensus library." ON)
option(BUILD_BITCOINKERNEL_LIB "Build experimental bitcoinkernel library." ${BUILD_UTIL_CHAINSTATE})
option(ASM "Use assembly routines." ON)

option(ENABLE_WALLET "Enable wallet." ON)
include(TristateOption)
tristate_option(WITH_SQLITE "Enable SQLite wallet support." "if libsqlite3 is found." AUTO)
tristate_option(WITH_BDB "Enable Berkeley DB (BDB) wallet support." "if libdb_cxx is found." AUTO)
option(WARN_INCOMPATIBLE_BDB "Warn when using a Berkeley DB (BDB) version other than 4.8." ON)
option(BUILD_WALLET_TOOL "Build bitcoin-wallet tool." ${ENABLE_WALLET})

option(CXX20 "Enable compilation in c++20 mode." OFF)
option(HARDENING "Attempt to harden the resulting executables." ON)
option(REDUCE_EXPORTS "Attempt to reduce exported symbols in the resulting executables." OFF)
option(WERROR "Treat compiler warnings as errors." OFF)
tristate_option(CCACHE "Use ccache for compiling." "if ccache is found." AUTO)
tristate_option(WITH_NATPMP "Enable NAT-PMP." "if libnatpmp is found." AUTO)
option(ENABLE_NATPMP_DEFAULT "If NAT-PMP is enabled, turn it on at startup." OFF)
tristate_option(WITH_MINIUPNPC "Enable UPnP." "if libminiupnpc is found." AUTO)
option(ENABLE_UPNP_DEFAULT "If UPnP is enabled, turn it on at startup." OFF)
tristate_option(WITH_ZMQ "Enable ZMQ notifications." "if libzmq is found." AUTO)
tristate_option(WITH_USDT
  "Enable tracepoints for Userspace, Statically Defined Tracing."
  "if sys/sdt.h is found."
  AUTO
)
tristate_option(WITH_QRENCODE "Enable QR code support." "if libqrencode is found." AUTO)
tristate_option(WITH_SECCOMP
  "Enable experimental syscall sandbox feature (-sandbox)."
  "if seccomp-bpf is found under Linux x86_64."
  AUTO
)
tristate_option(WITH_EXTERNAL_SIGNER "Enable external signer support." "if Boost.Process is found." AUTO)

option(BUILD_TESTS "Build test_bitcoin executable." ON)
option(BUILD_BENCH "Build bench_bitcoin executable." ON)
option(INSTALL_MAN "Install man pages." ON)

if(CXX20 OR MSVC)
  set(CMAKE_CXX_STANDARD 20)
else()
  set(CMAKE_CXX_STANDARD 17)
endif()
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

include(TryAppendCompilerFlag)
include(TryAppendLinkerFlag)

# Redefine "Debug" configuration flags.
set(debug_cpp_flags "-DDEBUG -DDEBUG_LOCKORDER -DDEBUG_LOCKCONTENTION -DRPC_DOC_CHECK -DABORT_ON_FAILED_ASSUME")
if(MSVC)
  set(CMAKE_C_FLAGS_DEBUG "${debug_cpp_flags} /Zi /Ob0 /Od /RTC1")
  set(CMAKE_CXX_FLAGS_DEBUG "${debug_cpp_flags} /Zi /Ob0 /Od /RTC1")
else()
  set(debug_c_flags "")
  try_append_cflag(debug_c_flags "-O0")
  try_append_cflag(debug_c_flags "-g3")
  if(NOT C_SUPPORTS_G3)
    try_append_cflag(debug_c_flags "-g")
  endif()
  set(CMAKE_C_FLAGS_DEBUG "${debug_cpp_flags} ${debug_c_flags}")
  set(debug_cxx_flags "")
  try_append_cxxflag(debug_cxx_flags "-O0")
  try_append_cxxflag(debug_cxx_flags "-g3")
  if(NOT CXX_SUPPORTS_G3)
    try_append_cxxflag(debug_cxx_flags "-g")
  endif()
  try_append_cxxflag(debug_cxx_flags "-ftrapv")
  if(MINGW)
    try_append_cxxflag(debug_cxx_flags "-Wa,-mbig-obj")
  endif()
  set(CMAKE_CXX_FLAGS_DEBUG "${debug_cpp_flags} ${debug_cxx_flags}")
endif()
set(CMAKE_OBJCXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")

# Redefine "Release" configuration flags.
if(MSVC)
  set(CMAKE_C_FLAGS_RELEASE "/O2 /Ob2")
  set(CMAKE_CXX_FLAGS_RELEASE "/O2 /Ob2")
else()
  set(release_c_flags "")
  try_append_cflag(release_c_flags "-O2")
  try_append_cflag(release_c_flags "-g")
  set(CMAKE_C_FLAGS_RELEASE "${release_c_flags}")
  set(release_cxx_flags "")
  try_append_cxxflag(release_cxx_flags "-O2")
  try_append_cxxflag(release_cxx_flags "-g")
  set(CMAKE_CXX_FLAGS_RELEASE "${release_cxx_flags}")
endif()
set(CMAKE_OBJCXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")

set(default_build_type "Release")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to \"${default_build_type}\" as none was specified")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE STRING "Choose the type of build." FORCE)
endif()

set(hardened_cxx_flags "")
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  # All versions of gcc that we commonly use for building are subject to bug
  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set
  # -fstack-reuse=none for all gcc builds.
  try_append_cxxflag(hardened_cxx_flags "-fstack-reuse=none")
endif()
if(HARDENING)
  if(MSVC)
    add_link_options(/DYNAMICBASE /HIGHENTROPYVA /NXCOMPAT)
  else()
    try_append_cxxflag(hardened_cxx_flags "-Wstack-protector")
    try_append_cxxflag(hardened_cxx_flags "-fstack-protector-all")
    try_append_cxxflag(hardened_cxx_flags "-fcf-protection=full")
    if(MINGW)
      link_libraries(ssp)
    else()
      # stack-clash-protection doesn't currently work, and likely should just be skipped for Windows.
      # See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90458 for more details.
      try_append_cxxflag(hardened_cxx_flags "-fstack-clash-protection")
    endif()

    set(hardened_linker_flags "")
    try_append_linker_flag(hardened_linker_flags "-Wl,--enable-reloc-section")
    try_append_linker_flag(hardened_linker_flags "-Wl,--dynamicbase")
    try_append_linker_flag(hardened_linker_flags "-Wl,--nxcompat")
    try_append_linker_flag(hardened_linker_flags "-Wl,--high-entropy-va")
    try_append_linker_flag(hardened_linker_flags "-Wl,-z,relro")
    try_append_linker_flag(hardened_linker_flags "-Wl,-z,now")
    try_append_linker_flag(hardened_linker_flags "-Wl,-z,separate-code")
    if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
      try_append_linker_flag(hardened_linker_flags "-Wl,-bind_at_load")
    endif()
    if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.13)
      separate_arguments(hardened_linker_flags)
      add_link_options(${hardened_linker_flags})
    else()
      link_libraries(${hardened_linker_flags})
    endif()
  endif()
endif()
separate_arguments(hardened_cxx_flags)
add_compile_options(${hardened_cxx_flags})

if(REDUCE_EXPORTS)
  set(CMAKE_CXX_VISIBILITY_PRESET hidden)
  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    link_libraries(-Wl,--exclude-libs,ALL)
  endif()
endif()

if(WERROR)
  if(MSVC)
    add_compile_options(/WX)
  else()
    set(error_cxx_flags "")
    try_append_cxxflag(error_cxx_flags "-Werror")
    if(NOT CXX_SUPPORTS_WERROR)
      message(FATAL_ERROR "WERROR set but -Werror is not usable.")
    endif()

    # -Wreturn-type is broken in GCC for MinGW-w64.
    # https://sourceforge.net/p/mingw-w64/bugs/306/
    try_append_cxxflag(error_cxx_flags "-Werror=return-type"
      CHECK_PASSED_FLAG ""
      CHECK_FAILED_FLAG "-Wno-error=return-type"
      SOURCE "#include <cassert>\nint f(){ assert(false); }"
    )

    separate_arguments(error_cxx_flags)
    add_compile_options(${error_cxx_flags})
  endif()
endif()

if(WIN32)
  add_definitions(-D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)
  if(MSVC)
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)
    add_definitions(/DNOMINMAX /D_CRT_SECURE_NO_WARNINGS)
    add_compile_options(/utf-8 /Zc:__cplusplus /W3 /wd4018 /wd4244 /wd4267 /wd4715 /wd4805)
    add_link_options($<$<CONFIG:Release>:/NODEFAULTLIB:LIBCMTD>)
    add_link_options(/LTCG:OFF)
  elseif(MINGW)
    add_definitions(-D_MT -DWIN32 -D_WINDOWS)
    set(mingw_linker_flags "")
    try_append_linker_flag(mingw_linker_flags "-static")
    # We require Windows 7 (NT 6.1) or later.
    try_append_linker_flag(mingw_linker_flags "-Wl,--major-subsystem-version,6")
    try_append_linker_flag(mingw_linker_flags "-Wl,--minor-subsystem-version,1")
    if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.13)
      separate_arguments(mingw_linker_flags)
      add_link_options(${mingw_linker_flags})
    else()
      link_libraries(${mingw_linker_flags})
    endif()
  endif()
endif()

if(APPLE)
  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)
  # These flags are specific to ld64, and may cause issues with other linkers.
  # For example: GNU ld will interpret -dead_strip as -de and then try and use
  # "ad_strip" as the symbol for the entry point.
  set(macos_linker_flags "")
  try_append_linker_flag(macos_linker_flags "-Wl,-dead_strip")
  try_append_linker_flag(macos_linker_flags "-Wl,-dead_strip_dylibs")
  try_append_linker_flag(macos_linker_flags "-Wl,-headerpad_max_install_names")
  if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.13)
    separate_arguments(macos_linker_flags)
    add_link_options(${macos_linker_flags})
  else()
    link_libraries(${macos_linker_flags})
  endif()
endif()

include(cmake/introspection.cmake)

include(cmake/subtree-minisketch.cmake)
include(cmake/subtree-secp256k1.cmake)

include(CheckStdFilesystem)
check_std_filesystem()

if(CMAKE_CROSSCOMPILING AND DEPENDS_ALLOW_HOST_PACKAGES)
  list(APPEND CMAKE_FIND_ROOT_PATH "${CMAKE_SYSTEM_PREFIX_PATH}")
endif()

if(BUILD_DAEMON OR BUILD_CLI OR BUILD_TX OR BUILD_BITCOINKERNEL_LIB OR BUILD_WALLET_TOOL OR NOT WITH_GUI STREQUAL "no")
  set(THREADS_PREFER_PTHREAD_FLAG ON)
  find_package(Threads REQUIRED)

  # Find Boost headers only.
  if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    execute_process(
      COMMAND brew --prefix boost
      OUTPUT_VARIABLE BOOST_ROOT
      ERROR_QUIET
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
  endif()
  set(Boost_NO_BOOST_CMAKE ON)
  find_package(Boost 1.64.0 REQUIRED)
  mark_as_advanced(Boost_INCLUDE_DIR)
  set_property(TARGET Boost::boost APPEND PROPERTY
    INTERFACE_COMPILE_DEFINITIONS $<$<CONFIG:Debug>:BOOST_MULTI_INDEX_ENABLE_SAFE_MODE>
  )
endif()

include(CrossPkgConfig)
if(BUILD_DAEMON OR BUILD_CLI OR NOT WITH_GUI STREQUAL "no")
  cross_pkg_check_modules(libevent REQUIRED libevent>=2.1.8 IMPORTED_TARGET)
  set_property(TARGET PkgConfig::libevent APPEND PROPERTY
    INTERFACE_LINK_LIBRARIES $<$<PLATFORM_ID:Windows>:iphlpapi;ws2_32>
  )
endif()

if(NOT WIN32 AND (BUILD_DAEMON OR NOT WITH_GUI STREQUAL "no"))
  cross_pkg_check_modules(libevent_pthreads REQUIRED libevent_pthreads>=2.1.8 IMPORTED_TARGET)
endif()

if(SANITIZERS)
  # First check if the compiler accepts flags. If an incompatible pair like
  # -fsanitize=address,thread is used here, this check will fail. This will also
  # fail if a bad argument is passed, e.g. -fsanitize=undfeined
  set(sanitizers_cxx_flags "")
  try_append_cxxflag(sanitizers_cxx_flags "-fsanitize=${SANITIZERS}")
  if(NOT try_append_cxxflag_result)
    message(FATAL_ERROR "Compiler did not accept requested flags.")
  endif()
  separate_arguments(sanitizers_cxx_flags)
  add_compile_options(${sanitizers_cxx_flags})

  # Some compilers (e.g. GCC) require additional libraries like libasan,
  # libtsan, libubsan, etc. Make sure linking still works with the sanitize
  # flag. This is a separate check so we can give a better error message when
  # the sanitize flags are supported by the compiler but the actual sanitizer
  # libs are missing.
  set(sanitizers_linker_flags "")
  set(sanitizers_linker_code "
    #include <cstdint>
    #include <cstddef>
    extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) { return 0; }
    __attribute__((weak)) // allow for libFuzzer linking
    int main() { return 0; }
  ")
  try_append_linker_flag(sanitizers_linker_flags "-fsanitize=${SANITIZERS}"
    SOURCE "${sanitizers_linker_code}"
  )
  if(NOT try_append_linker_flag_result)
    message(FATAL_ERROR "Linker did not accept requested flags, you are missing required libraries.")
  endif()
  if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.13)
    separate_arguments(sanitizers_linker_flags)
    add_link_options(${sanitizers_linker_flags})
  else()
    link_libraries(${sanitizers_linker_flags})
  endif()

  if(WITH_SECCOMP)
    message(WARNING "Specifying -DSANITIZERS forces -DWITH_SECCOMP=OFF since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).")
    set(WITH_SECCOMP OFF)
  endif()
endif()

include(cmake/optional_qt.cmake)
include(cmake/optional.cmake)

if(BUILD_BITCOINCONSENSUS_LIB)
  set(HAVE_CONSENSUS_LIB ON)
endif()

add_subdirectory(src)

set(abs_top_srcdir ${CMAKE_SOURCE_DIR})
set(abs_top_builddir ${CMAKE_BINARY_DIR})
set(EXEEXT ${CMAKE_EXECUTABLE_SUFFIX})
if(NOT ENABLE_WALLET)
  set(ENABLE_WALLET_TRUE \#)
endif()
if(NOT ENABLE_WALLET OR NOT WITH_SQLITE)
  set(USE_SQLITE_TRUE \#)
endif()
if(NOT ENABLE_WALLET OR NOT WITH_BDB)
  set(USE_BDB_TRUE \#)
endif()
if(NOT BUILD_CLI)
  set(BUILD_BITCOIN_CLI_TRUE \#)
endif()
if(NOT BUILD_UTIL)
  set(BUILD_BITCOIN_UTIL_TRUE \#)
endif()
if(NOT BUILD_WALLET_TOOL)
  set(BUILD_BITCOIN_WALLET_TRUE \#)
endif()
if(NOT BUILD_DAEMON)
  set(BUILD_BITCOIND_TRUE \#)
endif()
if(NOT WITH_ZMQ)
  set(ENABLE_ZMQ_TRUE \#)
endif()
if(NOT ENABLE_EXTERNAL_SIGNER)
  set(ENABLE_EXTERNAL_SIGNER_TRUE \#)
endif()
if(NOT USE_SYSCALL_SANDBOX)
  set(ENABLE_SYSCALL_SANDBOX_TRUE \#)
endif()
if(NOT ENABLE_TRACING)
  set(ENABLE_USDT_TRACEPOINTS_TRUE \#)
endif()
configure_file(test/config.ini.in test/config.ini @ONLY)
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/test/util)
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/test/functional)
if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.14)
  file(CREATE_LINK ${CMAKE_SOURCE_DIR}/test/util/test_runner.py ${CMAKE_BINARY_DIR}/test/util/test_runner.py)
  file(CREATE_LINK ${CMAKE_SOURCE_DIR}/test/util/rpcauth-test.py ${CMAKE_BINARY_DIR}/test/util/rpcauth-test.py)
  file(CREATE_LINK ${CMAKE_SOURCE_DIR}/test/functional/test_runner.py ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)
else()
  file(REMOVE ${CMAKE_BINARY_DIR}/test/util/test_runner.py)
  execute_process(COMMAND ln ${CMAKE_SOURCE_DIR}/test/util/test_runner.py ${CMAKE_BINARY_DIR}/test/util/test_runner.py)
  file(REMOVE ${CMAKE_BINARY_DIR}/test/util/rpcauth-test.py)
  execute_process(COMMAND ln ${CMAKE_SOURCE_DIR}/test/util/rpcauth-test.py ${CMAKE_BINARY_DIR}/test/util/rpcauth-test.py)
  file(REMOVE ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)
  execute_process(COMMAND ln ${CMAKE_SOURCE_DIR}/test/functional/test_runner.py ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)
endif()

set(BITCOIN_GUI_NAME "bitcoin-qt")
set(BITCOIN_DAEMON_NAME "bitcoind")
set(BITCOIN_CLI_NAME "bitcoin-cli")
set(BITCOIN_TX_NAME "bitcoin-tx")
set(BITCOIN_WALLET_TOOL_NAME "bitcoin-wallet")
set(BITCOIN_TEST_NAME "test_bitcoin")
set(PACKAGE_TARNAME "bitcoin")
configure_file(share/setup.nsi.in share/setup.nsi @ONLY)

# https://gitlab.kitware.com/cmake/community/-/wikis/doc/tutorials/EmulateMakeCheck
set(ctest_command_jobs_arg "")
if(DEFINED ENV{TESTJOBS})
  set(ctest_command_jobs_arg "$ENV{TESTJOBS}")
else()
  include(ProcessorCount)
  ProcessorCount(nproc)
  if(NOT nproc EQUAL 0)
    set(ctest_command_jobs_arg "-j ${nproc}")
  endif()
endif()
set(run_bench_bitcoin "")
if(TARGET bench_bitcoin)
  set(run_bench_bitcoin COMMAND $<TARGET_FILE:bench_bitcoin> --sanity-check)
endif()
set(CTEST_CONFIGURATION_TYPE "$<$<CONFIG:Release>:Release>$<$<CONFIG:Debug>:Debug>")
add_custom_target(check
  ${run_bench_bitcoin}
  COMMAND ${CMAKE_CTEST_COMMAND} -C ${CTEST_CONFIGURATION_TYPE} --test-dir ${CMAKE_BINARY_DIR}/src/test ${ctest_command_jobs_arg}
  COMMAND ${CMAKE_BINARY_DIR}/test/util/test_runner.py
  COMMAND ${CMAKE_BINARY_DIR}/test/util/rpcauth-test.py
  VERBATIM
)
if(TARGET test_bitcoin)
  add_dependencies(check test_bitcoin)
endif()
if(TARGET bench_bitcoin)
  add_dependencies(check bench_bitcoin)
endif()

if(NOT APPLE)
  set(OBJCOPY ${CMAKE_OBJCOPY})
  set(STRIP ${CMAKE_STRIP})
  configure_file(contrib/devtools/split-debug.sh.in split-debug.sh @ONLY)
endif()

include(GetAllExecutables)
get_all_executables(executables)

add_custom_target(check-symbols
  COMMAND echo "Running symbol and dynamic library checks..."
  COMMAND ${CMAKE_SOURCE_DIR}/contrib/devtools/symbol-check.py ${executables}
  VERBATIM
)

if(HARDENING)
  add_custom_target(check-security
    COMMAND echo "Checking binary security..."
    COMMAND ${CMAKE_SOURCE_DIR}/contrib/devtools/security-check.py ${executables}
    VERBATIM
  )
else()
  add_custom_target(check-security)
endif()

if(APPLE)
  set(exe_format MACHO)
elseif(WIN32)
  set(exe_format PE)
elseif(UNIX)
  set(exe_format ELF)
endif()
if(CMAKE_CROSSCOMPILING)
  string(REPLACE ";" " " c_compiler_command "${DEPENDS_C_COMPILER_WITH_LAUNCHER}")
else()
  set(c_compiler_command "${CMAKE_C_COMPILER}")
endif()
add_custom_target(test-security-check
  COMMAND env CC=${c_compiler_command} CFLAGS=${CMAKE_C_FLAGS} LDFLAGS=${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_SOURCE_DIR}/contrib/devtools/test-security-check.py TestSecurityChecks.test_${exe_format}
  COMMAND env CC=${c_compiler_command} CFLAGS=${CMAKE_C_FLAGS} LDFLAGS=${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_SOURCE_DIR}/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_${exe_format}
  VERBATIM
)

if(MINGW AND TARGET bitcoin-qt)
  # TODO: After dropping Autotools-based build system, replace
  #       this code with the CPack NSIS Generator.
  # See https://cmake.org/cmake/help/latest/cpack_gen/nsis.html
  add_custom_target(deploy
    COMMAND "${CMAKE_COMMAND}" --install "${CMAKE_BINARY_DIR}" --config "$<CONFIG>" --prefix "${CMAKE_BINARY_DIR}/release" --strip
    COMMAND "${CMAKE_COMMAND}" -E rename "${CMAKE_BINARY_DIR}/release/bin/$<TARGET_FILE_NAME:bitcoind>" "${CMAKE_BINARY_DIR}/release/$<TARGET_FILE_NAME:bitcoind>"
    COMMAND "${CMAKE_COMMAND}" -E rename "${CMAKE_BINARY_DIR}/release/bin/$<TARGET_FILE_NAME:bitcoin-qt>" "${CMAKE_BINARY_DIR}/release/$<TARGET_FILE_NAME:bitcoin-qt>"
    COMMAND "${CMAKE_COMMAND}" -E rename "${CMAKE_BINARY_DIR}/release/bin/$<TARGET_FILE_NAME:test_bitcoin>" "${CMAKE_BINARY_DIR}/release/$<TARGET_FILE_NAME:test_bitcoin>"
    COMMAND "${CMAKE_COMMAND}" -E rename "${CMAKE_BINARY_DIR}/release/bin/$<TARGET_FILE_NAME:bitcoin-cli>" "${CMAKE_BINARY_DIR}/release/$<TARGET_FILE_NAME:bitcoin-cli>"
    COMMAND "${CMAKE_COMMAND}" -E rename "${CMAKE_BINARY_DIR}/release/bin/$<TARGET_FILE_NAME:bitcoin-tx>" "${CMAKE_BINARY_DIR}/release/$<TARGET_FILE_NAME:bitcoin-tx>"
    COMMAND "${CMAKE_COMMAND}" -E rename "${CMAKE_BINARY_DIR}/release/bin/$<TARGET_FILE_NAME:bitcoin-wallet>" "${CMAKE_BINARY_DIR}/release/$<TARGET_FILE_NAME:bitcoin-wallet>"
    COMMAND "${CMAKE_COMMAND}" -E rename "${CMAKE_BINARY_DIR}/release/bin/$<TARGET_FILE_NAME:bitcoin-util>" "${CMAKE_BINARY_DIR}/release/$<TARGET_FILE_NAME:bitcoin-util>"
    COMMAND "${CMAKE_COMMAND}" -E remove_directory "${CMAKE_BINARY_DIR}/release/bin"
    COMMAND "${CMAKE_COMMAND}" -E remove_directory "${CMAKE_BINARY_DIR}/release/lib"
    COMMAND "${CMAKE_COMMAND}" -E remove_directory "${CMAKE_BINARY_DIR}/release/include"
    COMMAND "${CMAKE_COMMAND}" -E remove_directory "${CMAKE_BINARY_DIR}/release/share"
    COMMAND makensis -V2 "${CMAKE_BINARY_DIR}/share/setup.nsi"
    VERBATIM
  )
endif()

if(APPLE AND CMAKE_CROSSCOMPILING AND TARGET bitcoin-qt)
  set(macos_app "Bitcoin-Qt.app")
  string(REPLACE " " "-" OSX_VOLNAME ${PACKAGE_NAME})
  configure_file(cmake/macdeploy/osx_volname.in osx_volname @ONLY)
  configure_file(cmake/macdeploy/InfoPlist.strings.in ${macos_app}/Contents/Resources/Base.lproj/InfoPlist.strings @ONLY)
  configure_file(cmake/macdeploy/PkgInfo ${macos_app}/Contents/PkgInfo COPYONLY)
  configure_file(contrib/macdeploy/background.tiff contrib/macdeploy/background.tiff COPYONLY)
  configure_file(share/qt/Info.plist.in ${macos_app}/Contents/Info.plist @ONLY)
  configure_file(src/qt/res/icons/bitcoin.icns ${macos_app}/Contents/Resources/bitcoin.icns COPYONLY)

  add_custom_command(
    OUTPUT dist/${macos_app}/Contents/MacOS/Bitcoin-Qt
    COMMAND "${CMAKE_COMMAND}" -E touch "${CMAKE_BINARY_DIR}/${macos_app}/Contents/Resources/empty.lproj"
    COMMAND "${CMAKE_COMMAND}" --install "${CMAKE_BINARY_DIR}" --config "$<CONFIG>" --component GUI --prefix "${CMAKE_BINARY_DIR}/release" --strip
    COMMAND "${CMAKE_COMMAND}" -E make_directory "${CMAKE_BINARY_DIR}/${macos_app}/Contents/MacOS"
    COMMAND "${CMAKE_COMMAND}" -E rename "${CMAKE_BINARY_DIR}/release/bin/$<TARGET_FILE_NAME:bitcoin-qt>" "${CMAKE_BINARY_DIR}/${macos_app}/Contents/MacOS/Bitcoin-Qt"
    COMMAND "${CMAKE_COMMAND}" -E remove_directory "${CMAKE_BINARY_DIR}/release"
    COMMAND PYTHONPATH=${PYTHONPATH} INSTALL_NAME_TOOL=${CMAKE_INSTALL_NAME_TOOL} OTOOL=${OTOOL} STRIP=${CMAKE_STRIP} ${CMAKE_SOURCE_DIR}/contrib/macdeploy/macdeployqtplus ${macos_app} ${OSX_VOLNAME} -translations-dir=${QT_TRANSLATIONS_DIR}
    VERBATIM
  )

  add_custom_target(deploydir
    DEPENDS dist/${macos_app}/Contents/MacOS/Bitcoin-Qt
  )

  set(xorrisofs_options)
  if(DEFINED ENV{SOURCE_DATE_EPOCH})
    set(xorrisofs_options -volume_date all_file_dates =$ENV{SOURCE_DATE_EPOCH})
  endif()
  add_custom_target(deploy
    COMMAND xorrisofs -D -l -V "${OSX_VOLNAME}" -no-pad -r -dir-mode 0755 -o ${OSX_VOLNAME}.dmg ${CMAKE_BINARY_DIR}/dist -- ${xorrisofs_options}
    VERBATIM
  )
  add_dependencies(deploy deploydir)
endif()

message("\n")
message("Configure summary")
message("=================")
message("Executables:")
message("  bitcoind ............................ ${BUILD_DAEMON}")
message("  bitcoin-cli ......................... ${BUILD_CLI}")
message("  bitcoin-tx .......................... ${BUILD_TX}")
message("  bitcoin-util ........................ ${BUILD_UTIL}")
message("  bitcoin-chainstate (experimental) ... ${BUILD_UTIL_CHAINSTATE}")
message("  bitcoin-wallet ...................... ${BUILD_WALLET_TOOL}")
message("Libraries:")
message("  build shared ........................ ${BUILD_SHARED}")
message("  build static ........................ ${BUILD_STATIC}")
message("  libbitcoinconsensus ................. ${BUILD_BITCOINCONSENSUS_LIB}")
message("  libbitcoinkernel (experimental) ..... ${BUILD_BITCOINKERNEL_LIB}")
message("Wallet support:")
message("  SQLite, descriptor wallets .......... ${WITH_SQLITE}")
message("  Berkeley DB, legacy wallets ......... ${WITH_BDB}")
message("Optional packages:")
message("  GUI ................................. ${WITH_GUI}")
if(NOT WITH_GUI STREQUAL "no")
  message("  QR code (GUI) ....................... ${WITH_QRENCODE}")
endif()
message("  external signer ..................... ${WITH_EXTERNAL_SIGNER}")
message("  NAT-PMP ............................. ${WITH_NATPMP}")
message("  UPnP ................................ ${WITH_MINIUPNPC}")
message("  ZeroMQ .............................. ${WITH_ZMQ}")
message("  USDT tracing ........................ ${WITH_USDT}")
message("  experimental syscall sandbox ........ ${WITH_SECCOMP}")
message("Tests:")
message("  test_bitcoin ........................ ${BUILD_TESTS}")
message("  bench_bitcoin ....................... ${BUILD_BENCH}")
message("")
if(CMAKE_CROSSCOMPILING)
  set(cross_status "TRUE, for ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}")
else()
  set(cross_status "FALSE")
endif()
message("Cross compiling ....................... ${cross_status}")
get_directory_property(definitions COMPILE_DEFINITIONS)
string(REPLACE ";" " " definitions "${definitions}")
message("Preprocessor defined macros ........... ${definitions}")
message("C compiler ............................ ${CMAKE_C_COMPILER}")
message("CFLAGS ................................ ${CMAKE_C_FLAGS}")
message("C++ compiler .......................... ${CMAKE_CXX_COMPILER}")
message("CXXFLAGS .............................. ${CMAKE_CXX_FLAGS}")
get_directory_property(common_compile_options COMPILE_OPTIONS)
string(REPLACE ";" " " common_compile_options "${common_compile_options}")
message("Common compile options ................ ${common_compile_options}")
if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.13)
  get_directory_property(common_link_options LINK_OPTIONS)
  string(REPLACE ";" " " common_link_options "${common_link_options}")
  message("Common link options ................... ${common_link_options}")
endif()
if(DEFINED CMAKE_BUILD_TYPE)
  message("Build type:")
  message(" - CMAKE_BUILD_TYPE ................... ${CMAKE_BUILD_TYPE}")
  string(TOUPPER "${CMAKE_BUILD_TYPE}" build_type)
  message(" - CFLAGS ............................. ${CMAKE_C_FLAGS_${build_type}}")
  message(" - CXXFLAGS ........................... ${CMAKE_CXX_FLAGS_${build_type}}")
  message(" - LDFLAGS for executables ............ ${CMAKE_EXE_LINKER_FLAGS_${build_type}}")
  message(" - LDFLAGS for shared libraries ....... ${CMAKE_SHARED_LINKER_FLAGS_${build_type}}")
else()
  message("Available configurations .............. ${CMAKE_CONFIGURATION_TYPES}")
  message("Debug configuration:")
  message(" - CFLAGS ............................. ${CMAKE_C_FLAGS_DEBUG}")
  message(" - CXXFLAGS ........................... ${CMAKE_CXX_FLAGS_DEBUG}")
  message(" - LDFLAGS for executables ............ ${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
  message(" - LDFLAGS for shared libraries ....... ${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
  message("Release configuration:")
  message(" - CFLAGS ............................. ${CMAKE_C_FLAGS_RELEASE}")
  message(" - CXXFLAGS ........................... ${CMAKE_CXX_FLAGS_RELEASE}")
  message(" - LDFLAGS for executables ............ ${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
  message(" - LDFLAGS for shared libraries ....... ${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
endif()
message("Use assembly routines ................. ${ASM}")
message("Treat compiler warnings as errors ..... ${WERROR}")
message("Use ccache for compiling .............. ${CCACHE}")
message("\n")
